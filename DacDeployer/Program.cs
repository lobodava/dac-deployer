using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml;
using DeployDatabase.Helpers;
using Microsoft.SqlServer.Dac;
using static System.String;

namespace DeployDatabase
{
	class Program
	{
		private const string MsBuildXmlNamespace = "http://schemas.microsoft.com/developer/msbuild/2003";

        private static string DacPacFolder;
        private static string DacPacFile;
        private static string PublishProfileFolder;
		private static string PublishProfileFile;        
		//private static string BuildConfiguration;

        private static string BeforeDeploymentScript;
        private static string SqlCmdVariablesScript;


        static void Main(string[] args)
		{
			Console.WriteLine($"Welcome to Database Deployer! Console.Title = {Console.Title}");
			
			try {

                (DacPacFolder, DacPacFile) = PathResolver.GetDacPacPaths();

                (PublishProfileFolder, PublishProfileFile) = PathResolver.GetPublishProfilePaths();

               
				
				var publishProfile = new PublishProfile(PublishProfileFile);

                Console.WriteLine($"ConnectionString = \"{publishProfile.ConnectionString ?? "null"}\"");
				Console.WriteLine($"DatabaseName = \"{publishProfile.DatabaseName ?? "null"}\"");
				Console.WriteLine($"ServerName = \"{publishProfile.ServerName ?? "null"}\"");
				Console.WriteLine($"UserID = \"{publishProfile.UserID ?? "null"}\"");
				Console.WriteLine($"Password = \"{publishProfile.Password ?? "null"}\"");

                BeforeDeploymentScript = ConsoleAppArgsParser.GetParamValue("BeforeDeploymentScript");
                SqlCmdVariablesScript = ConsoleAppArgsParser.GetParamValue("SqlCmdVariablesScript");



                Console.WriteLine($"BeforeDeploymentRelativeDirectory = \"{publishProfile.BeforeDeploymentRelativeDirectory ?? "null"}\"");

				if (!IsNullOrWhiteSpace(DacPacFolder)  && !IsNullOrWhiteSpace(publishProfile.BeforeDeploymentRelativeDirectory)) {
					publishProfile.BeforeDeploymentAbsoluteDirectory = Path.Combine(DacPacFolder, publishProfile.BeforeDeploymentRelativeDirectory);
				}

				AppendSqlCmdVariables(publishProfile);

				var beforeDeploymentSuccess = true;

				if (!IsNullOrWhiteSpace(publishProfile.BeforeDeploymentAbsoluteDirectory) && !IsNullOrWhiteSpace(publishProfile.BeforeDeploymentScriptName) && !IsNullOrWhiteSpace(publishProfile.DatabaseName) && DatabaseExists(publishProfile)) {

					var arguments = new string[] {
						$"-S {publishProfile.ServerName}",
						$"-i \"{publishProfile.BeforeDeploymentScriptName}\""
					};

					beforeDeploymentSuccess = ProcessStarter.StartProcess(publishProfile.BeforeDeploymentAbsoluteDirectory, "sqlcmd", arguments, "Success Message :)", "Fail Message :(");

				}

				if (beforeDeploymentSuccess && !IsNullOrWhiteSpace(DacPacFolder) && !IsNullOrWhiteSpace(publishProfile.DatabaseName)) 
				{
					DeployDacPac(publishProfile);

				}
			
				if (RunsDirectly()) Console.ReadKey();

			}

			catch(Exception ex) 
			{
				ExitWithError(ex.Message);
			}
		}

		private static void ExitWithError(string message) {
			Console.WriteLine();
			Console.WriteLine("DatabaseDeployer exited with the following error:");
			Console.WriteLine(message);
			Console.WriteLine();
			
			if (RunsDirectly()) {
				
				Console.WriteLine("Press any key...");
				Console.ReadKey();
			}
			Environment.Exit(0);
		}

		private static bool RunsDirectly () {
			return (Console.Title?.EndsWith("DeployDatabase.exe") == true);
		}

		


		private static bool DatabaseExists(PublishProfile publishProfile)
		{
			using (SqlConnection conn = new SqlConnection(publishProfile.ConnectionString))
			{
				SqlCommand cmd = conn.CreateCommand();
				cmd.CommandType = CommandType.Text;
				cmd.CommandText = $"select case when db_id('{publishProfile.DatabaseName}') is null then 0 else 1 end";

				conn.Open();

				int result = (int)cmd.ExecuteScalar();
				return result == 1;
			}
		}
		

		private static void AppendSqlCmdVariables(PublishProfile publishProfile)
		{

			if (IsNullOrWhiteSpace(publishProfile.BeforeDeploymentAbsoluteDirectory) || IsNullOrWhiteSpace(publishProfile.SqlCmdVariablesScriptName))
				return;

			var targetPath = Path.Combine(publishProfile.BeforeDeploymentAbsoluteDirectory, publishProfile.SqlCmdVariablesScriptName);

			if (!File.Exists(targetPath))
				ExitWithError($"SqlCmdVariablesScript file \"{targetPath}\" not found.");

			var sb = new StringBuilder();

			sb.AppendLine("-- The content of this file is autogenerated.")
				.AppendLine($"-- The following SqlCmd variables were inserted from publish profile \"{Path.GetFileName(PublishProfileFile)}\".")
				.AppendLine("-- Don't add anything here — the content will be completely renewed.")
				.AppendLine();

			
			foreach (KeyValuePair<String, String> pair in publishProfile.SqlCmdVariables)
			{
				sb.AppendLine($":setvar {pair.Key} \"{pair.Value}\"");
			}
		
			File.WriteAllText(targetPath, sb.ToString());
		}


		private static void DeployDacPac(PublishProfile publishProfile) 
		{
			// https://blogs.msmvps.com/deborahk/deploying-a-dacpac-with-dacfx-api/
			// https://stackoverflow.com/questions/10438258/using-microsoft-build-evaluation-to-publish-a-database-project-sqlproj

			string getMessage (DacMessage m) 
			{
				if (m.Number == 0) 
					return m.Message;

				return $"{m.Number}: {m.Message}";
			}

			var dacService = new DacServices(publishProfile.ConnectionString); 
			dacService.Message += (s,e) => Console.WriteLine(getMessage(e.Message));
            //dacService.ProgressChanged += (s,e) => Console.WriteLine($"{e.Status}: {e.Message}");

			try 
            { 
				var dacPacPath = Path.Combine(DacPacFolder, $"{publishProfile.DatabaseName}.dacpac");


                using (DacPackage dacpac = DacPackage.Load(dacPacPath)) 
                { 
					//Console.WriteLine("Preparing Deployment Report:");
					//Console.WriteLine();
					//Console.Write(dacService.GenerateDeployReport(dacpac, DatabaseName, options: dacOptions)); 
					//Console.WriteLine();

					//Console.WriteLine("Preparing Deployment script:");
					//Console.WriteLine();
					//Console.Write(dacService.GenerateDeployScript(dacpac, DatabaseName, options: dacOptions)); 
					//Console.WriteLine();

					Console.WriteLine("Start of deployment:");
					Console.WriteLine();

                    dacService.Deploy(dacpac, publishProfile.DatabaseName, upgradeExisting: true, options: publishProfile.DacDeployOptions); 
                }

				Console.WriteLine();
				Console.WriteLine("DeployDacPac SUCCESS!!!");

            } 
            catch (Exception ex) 
            { 
                //success = false; 
                //MessageList.Add(ex.Message); 
				Console.WriteLine();
				Console.WriteLine("DeployDacPac FAIL!!!");
				Console.WriteLine("The exception is:");
				Console.WriteLine(ex.Message);
            }
			
		}

	}
}
