using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using DeployDatabase.Helpers;
using Microsoft.SqlServer.Dac;
using static System.String;

namespace DeployDatabase
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine($"Welcome to Dac Deployer! Console.Title = {Console.Title}");
            
            try 
            {
                (var dacPacFolderPath, var dacPacFilePath) = PathResolver.GetDacPacPaths();

                var publishProfileFilePath = PathResolver.GetPublishProfilePath();
                
                var publishProfile = new PublishProfile(publishProfileFilePath);

                (var beforeDeploymentScriptPath, var sqlCmdVariablesScriptPath) = PathResolver.GetBeforeDeploymentPaths(dacPacFolderPath);

                AppendSqlCmdVariables(sqlCmdVariablesScriptPath, publishProfile);

                if (ExecuteBeforeDeployment(beforeDeploymentScriptPath, publishProfile)) 
                    DeployDacPac(dacPacFilePath, publishProfile);

                if (RunsDirectly()) Console.ReadKey();

            }
            catch(Exception ex) 
            {
                ExitWithError(ex.Message);
            }
        }

        private static bool ExecuteBeforeDeployment(string beforeDeploymentScript, PublishProfile publishProfile)
        {
            if (IsNullOrWhiteSpace(beforeDeploymentScript) || !DatabaseExists(publishProfile))
                return true;

            var beforeDeploymentWorkingDirectory = Path.GetDirectoryName(beforeDeploymentScript);
            var beforeDeploymentScriptName = Path.GetFileName(beforeDeploymentScript);

            var arguments = new string[]
            {
                $"-S {publishProfile.ServerName}",
                $"-i \"{beforeDeploymentScriptName}\""
            };

            return ProcessStarter.StartProcess(beforeDeploymentWorkingDirectory, "sqlcmd", arguments, "Success Message :)", "Fail Message :(");
        }

        private static bool DatabaseExists(PublishProfile publishProfile)
        {
            using (SqlConnection conn = new SqlConnection(publishProfile.ConnectionString))
            {
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = $"select case when db_id('{publishProfile.DatabaseName}') is null then 0 else 1 end";

                conn.Open();

                return (int)cmd.ExecuteScalar() == 1;
            }
        }

        private static void AppendSqlCmdVariables( string sqlCmdVariablesScript, PublishProfile publishProfile)
        {

            if (IsNullOrWhiteSpace(sqlCmdVariablesScript))
                return;

            var sb = new StringBuilder();

            sb.AppendLine("-- The content of this file is autogenerated.")
                .AppendLine($"-- The following SqlCmd variables were inserted from publish profile \"{Path.GetFileName(publishProfile.FilePath)}\".")
                .AppendLine("-- Don't add anything here — the content will be completely renewed.")
                .AppendLine();

            
            foreach (var pair in publishProfile.SqlCmdVariables)
            {
                sb.AppendLine($":setvar {pair.Key} \"{pair.Value}\"");
            }
        
            File.WriteAllText(sqlCmdVariablesScript, sb.ToString());
        }

        private static void DeployDacPac(string dacPacFile, PublishProfile publishProfile) 
        {
            // https://blogs.msmvps.com/deborahk/deploying-a-dacpac-with-dacfx-api/
            // https://stackoverflow.com/questions/10438258/using-microsoft-build-evaluation-to-publish-a-database-project-sqlproj

            string getMessage (DacMessage m) 
            {
                if (m.Number == 0) 
                    return m.Message;

                return $"{m.Number}: {m.Message}";
            }

            var dacService = new DacServices(publishProfile.ConnectionString); 
            dacService.Message += (s,e) => Console.WriteLine(getMessage(e.Message));
            //dacService.ProgressChanged += (s,e) => Console.WriteLine($"{e.Status}: {e.Message}");

            try 
            { 
                using (DacPackage dacpac = DacPackage.Load(dacPacFile)) 
                {
                    Console.WriteLine("Start of DAC deployment:");
                    Console.WriteLine();

                    dacService.Deploy(dacpac, publishProfile.DatabaseName, upgradeExisting: true, options: publishProfile.DacDeployOptions); 
                }

                Console.WriteLine();
                Console.WriteLine("DeployDacPac SUCCESS!!!");

            } 
            catch (Exception ex) 
            { 
                //success = false; 
                //MessageList.Add(ex.Message); 
                Console.WriteLine();
                Console.WriteLine("DeployDacPac FAIL!!!");
                Console.WriteLine("The exception is:");
                Console.WriteLine(ex.Message);
            }
            
        }

        private static void ExitWithError(string message) {
            Console.WriteLine();
            Console.WriteLine("DatabaseDeployer exited with the following error:");
            Console.WriteLine(message);
            Console.WriteLine();
            
            if (RunsDirectly()) {
                
                Console.WriteLine("Press any key...");
                Console.ReadKey();
            }
            Environment.Exit(0);
        }

        private static bool RunsDirectly()
        {
            return (Console.Title?.EndsWith("DacDeployer.exe") == true);
        }
    }
}


//Console.WriteLine("Preparing Deployment Report:");
//Console.WriteLine();
//Console.Write(dacService.GenerateDeployReport(dacpac, DatabaseName, options: dacOptions)); 
//Console.WriteLine();

//Console.WriteLine("Preparing Deployment script:");
//Console.WriteLine();
//Console.Write(dacService.GenerateDeployScript(dacpac, DatabaseName, options: dacOptions)); 
//Console.WriteLine();
