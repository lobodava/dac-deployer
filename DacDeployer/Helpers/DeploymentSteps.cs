using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using Microsoft.SqlServer.Dac;
using static System.String;

namespace DacDeployer.Helpers
{
    public static class DeploymentSteps
    {

        public static bool ExecuteBeforeDeployment(string beforeDeploymentScript, PublishProfile publishProfile)
        {
            if (IsNullOrWhiteSpace(beforeDeploymentScript) || !DatabaseExists(publishProfile))
                return true;

            var beforeDeploymentWorkingDirectory = Path.GetDirectoryName(beforeDeploymentScript);
            var beforeDeploymentScriptName = Path.GetFileName(beforeDeploymentScript);

            var arguments = new string[]
            {
                $"-S {publishProfile.ServerName}",
                $"-i \"{beforeDeploymentScriptName}\""
            };

            return ProcessStarter.StartProcess(beforeDeploymentWorkingDirectory, "sqlcmd", arguments, "Success Message :)", "Fail Message :(");
        }

        public static bool DatabaseExists(PublishProfile publishProfile)
        {
            using (SqlConnection conn = new SqlConnection(publishProfile.ConnectionString))
            {
                SqlCommand cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.Text;
                cmd.CommandText = $"select case when db_id('{publishProfile.DatabaseName}') is null then 0 else 1 end";

                conn.Open();

                return (int)cmd.ExecuteScalar() == 1;
            }
        }

        public static void AppendSqlCmdVariables(string sqlCmdVariablesScript, PublishProfile publishProfile)
        {

            if (IsNullOrWhiteSpace(sqlCmdVariablesScript))
                return;

            var sb = new StringBuilder();

            sb.AppendLine("-- The content of this file is autogenerated.")
                .AppendLine($"-- The following SqlCmd variables were inserted from publish profile \"{Path.GetFileName(publishProfile.FilePath)}\".")
                .AppendLine("-- Don't add anything here — the content will be completely renewed.")
                .AppendLine();


            foreach (var pair in publishProfile.SqlCmdVariables)
            {
                sb.AppendLine($":setvar {pair.Key} \"{pair.Value}\"");
            }

            File.WriteAllText(sqlCmdVariablesScript, sb.ToString());
        }

        public static void DeployDacPac(string dacPacFile, PublishProfile publishProfile)
        {
            // https://blogs.msmvps.com/deborahk/deploying-a-dacpac-with-dacfx-api/
            // https://stackoverflow.com/questions/10438258/using-microsoft-build-evaluation-to-publish-a-database-project-sqlproj

            string getMessage(DacMessage m)
            {
                if (m.Number == 0)
                    return m.Message;

                return $"{m.Number}: {m.Message}";
            }

            var dacService = new DacServices(publishProfile.ConnectionString);
            dacService.Message += (s, e) => Logger.AppendLine(getMessage(e.Message));
            //dacService.ProgressChanged += (s,e) => Logger.AppendLine($"{e.Status}: {e.Message}");

            try
            {
                using (DacPackage dacpac = DacPackage.Load(dacPacFile))
                {
                    Logger.AppendLine("Start of DAC deployment:");
                    Logger.AppendEmptyLine();

                    dacService.Deploy(dacpac, publishProfile.DatabaseName, upgradeExisting: true, options: publishProfile.DacDeployOptions);
                }

                Logger.AppendEmptyLine();
                Logger.AppendLine("DeployDacPac SUCCESS!!!");

            }
            catch (Exception ex)
            {
                //success = false; 
                //MessageList.Add(ex.Message); 
                Logger.AppendEmptyLine();
                Logger.AppendLine("DeployDacPac FAIL!!!");
                Logger.AppendLine("The exception is:");
                Logger.AppendLine(ex.Message);
            }

        }

    }
}
